local self = {}
CAC.LuaEntryPointCollection = CAC.MakeConstructor (self, CAC.Serialization.ISerializable)

CAC.SerializerRegistry:RegisterSerializable ("LuaEntryPointCollection", 1)

function self:ctor ()
	self.EntryClassName      = "LuaEntryPoint"
	self.EntryConstructor    = CAC.LuaEntryPoint
	
	self.NetReceiverCount    = 0
	self.ConsoleCommandCount = 0
	self.HookCount           = 0
	
	self.NetReceivers        = {}
	self.ConsoleCommands     = {}
	self.Hooks               = {}
	
	self.PatternCount        = 0
	self.Patterns            = {}
	
	self.EntryCount          = 0
	self.Entries             = {}
	self.EntriesByHash       = {}
	self.EntriesByHashArray  = {}
end

-- ISerializable
function self:Serialize (outBuffer)
	local serializerVersion = CAC.SerializerRegistry:GetLatestSerializerVersion (self.EntryClassName)
	local serializer        = CAC.SerializerRegistry:GetSerializer (self.EntryClassName, serializerVersion)
	
	outBuffer:UInt32 (serializerVersion)
	
	local subOutBuffer = CAC.StringOutBuffer ()
	self:SerializeNetReceivers (subOutBuffer, serializer)
	outBuffer:StringN32 (subOutBuffer:GetString ())
	
	subOutBuffer = CAC.StringOutBuffer ()
	self:SerializeConsoleCommands (subOutBuffer, serializer)
	outBuffer:StringN32 (subOutBuffer:GetString ())
	
	subOutBuffer = CAC.StringOutBuffer ()
	self:SerializeHooks (subOutBuffer, serializer)
	outBuffer:StringN32 (subOutBuffer:GetString ())
	
	subOutBuffer = CAC.StringOutBuffer ()
	self:SerializePatterns (subOutBuffer, serializer)
	outBuffer:StringN32 (subOutBuffer:GetString ())
	
	return outBuffer
end

function self:Deserialize (inBuffer)
	local deserializerVersion = inBuffer:UInt32 ()
	local deserializer        = CAC.SerializerRegistry:GetDeserializer (self.EntryClassName, deserializerVersion)
	
	if not deserializer then
		return false, "Cannot handle version " .. deserializerVersion .. " " .. self.EntryClassName .. "s."
	end
	
	local subInBuffer = CAC.StringInBuffer (inBuffer:StringN32 ())
	self:DeserializeNetReceivers (subInBuffer, deserializer)
	
	subInBuffer = CAC.StringInBuffer (inBuffer:StringN32 ())
	self:DeserializeConsoleCommands (subInBuffer, deserializer)
	
	subInBuffer = CAC.StringInBuffer (inBuffer:StringN32 ())
	self:DeserializeHooks (subInBuffer, deserializer)
	
	subInBuffer = CAC.StringInBuffer (inBuffer:StringN32 ())
	self:DeserializePatterns (subInBuffer, deserializer)
	
	return true
end

-- LuaEntryPointCollection
function self:SerializeNetReceivers (outBuffer, serializer)
	outBuffer:UInt32 (self:GetNetReceiverCount ())
	for luaEntryPoint in self:GetNetReceiverEnumerator () do
		serializer (luaEntryPoint, outBuffer)
	end
	
	return outBuffer
end

function self:SerializeConsoleCommands (outBuffer, serializer)
	outBuffer:UInt32 (self:GetConsoleCommandCount ())
	for luaEntryPoint in self:GetConsoleCommandEnumerator () do
		serializer (luaEntryPoint, outBuffer)
	end
	
	return outBuffer
end

function self:SerializeHooks (outBuffer, serializer)
	outBuffer:UInt32 (self:GetHookCount ())
	for luaEntryPoint in self:GetHookEnumerator () do
		serializer (luaEntryPoint, outBuffer)
	end
	
	return outBuffer
end

function self:SerializePatterns (outBuffer, serializer)
	outBuffer:UInt32 (self:GetPatternCount ())
	for luaEntryPoint in self:GetPatternEnumerator () do
		serializer (luaEntryPoint, outBuffer)
	end
	
	return outBuffer
end

function self:DeserializeNetReceivers (inBuffer, deserializer)
	local count = inBuffer:UInt32 ()
	count = math.min (count, 2048)
	
	for i = 1, count do
		local luaEntryPoint = self.EntryConstructor ()
		deserializer (luaEntryPoint, inBuffer)
		
		self:AddNetReceiver (luaEntryPoint)
	end
	
	return self
end

function self:DeserializeConsoleCommands (inBuffer, deserializer)
	local count = inBuffer:UInt32 ()
	count = math.min (count, 2048)
	
	for i = 1, count do
		local luaEntryPoint = self.EntryConstructor ()
		deserializer (luaEntryPoint, inBuffer)
		
		self:AddConsoleCommand (luaEntryPoint)
	end
	
	return self
end

function self:DeserializeHooks (inBuffer, deserializer)
	local count = inBuffer:UInt32 ()
	count = math.min (count, 2048)
	
	for i = 1, count do
		local luaEntryPoint = self.EntryConstructor ()
		deserializer (luaEntryPoint, inBuffer)
		
		self:AddHook (luaEntryPoint)
	end
	
	return self
end

function self:DeserializePatterns (inBuffer, deserializer)
	local count = inBuffer:UInt32 ()
	count = math.min (count, 2048)
	
	for i = 1, count do
		local luaEntryPoint = self.EntryConstructor ()
		deserializer (luaEntryPoint, inBuffer)
		
		self:AddPattern (luaEntryPoint)
	end
	
	return self
end

function self:AddEntry (luaEntryPoint)
	if luaEntryPoint:IsNetReceiver () then
		self:AddNetReceiver (luaEntryPoint)
	elseif luaEntryPoint:IsConsoleCommand () then
		self:AddConsoleCommand (luaEntryPoint)
	elseif luaEntryPoint:IsHook () then
		self:AddHook (luaEntryPoint)
	end
end

function self:AddNetReceiver (luaEntryPoint)
	if not self.NetReceivers [luaEntryPoint:GetName ()] then
		self.NetReceiverCount = self.NetReceiverCount + 1
	end
	self.NetReceivers [luaEntryPoint:GetName ()] = luaEntryPoint
	
	self:AddEntry (luaEntryPoint)
end

function self:AddConsoleCommand (luaEntryPoint)
	if not self.ConsoleCommands [luaEntryPoint:GetName ()] then
		self.ConsoleCommandCount = self.ConsoleCommandCount + 1
	end
	self.ConsoleCommands [luaEntryPoint:GetName ()] = luaEntryPoint
	
	self:AddEntry (luaEntryPoint)
end

function self:AddHook (luaEntryPoint)
	self.Hooks [luaEntryPoint:GetEventName ()] = self.Hooks [luaEntryPoint:GetEventName ()] or {}
	if not self.Hooks [luaEntryPoint:GetEventName ()] [luaEntryPoint:GetName ()] then
		self.HookCount = self.HookCount + 1
	end
	self.Hooks [luaEntryPoint:GetEventName ()] [luaEntryPoint:GetName ()] = luaEntryPoint
	
	self:AddEntry (luaEntryPoint)
end

function self:AddPattern (luaEntryPoint)
	self.PatternCount = self.PatternCount + 1
	self.Patterns [#self.Patterns + 1] = luaEntryPoint
end

function self:Clear ()
	self.NetReceiverCount    = 0
	self.ConsoleCommandCount = 0
	self.HookCount           = 0
	
	self.NetReceivers        = {}
	self.ConsoleCommands     = {}
	self.Hooks               = {}
	
	self.PatternCount        = 0
	self.Patterns            = {}
	
	self.EntryCount          = 0
	self.Entries             = {}
	self.EntriesByHash       = {}
	self.EntriesByHashArray  = {}
end

function self:GetCount ()
	return self.EntryCount
end

function self:GetEnumerator ()
	return CAC.ArrayEnumerator (self.Entries)
end

function self:GetNetReceiver (name)
	return self.NetReceivers [name]
end

function self:GetNetReceiverCount ()
	return self.NetReceiverCount
end

function self:GetNetReceiverEnumerator ()
	return CAC.ValueEnumerator (self.NetReceivers)
end

function self:GetConsoleCommand (name)
	return self.ConsoleCommands [name]
end

function self:GetConsoleCommandCount ()
	return self.ConsoleCommandCount
end

function self:GetConsoleCommandEnumerator ()
	return CAC.ValueEnumerator (self.ConsoleCommands)
end

function self:GetHook (eventName, name)
	if not self.Hooks [eventName] then return nil end
	return self.Hooks [eventName] [name]
end

function self:GetHookCount ()
	return self.HookCount
end

function self:GetHookEnumerator ()
	for _, hookTable in pairs (self.Hooks) do
		for _, luaEntryPoint in pairs (hookTable) do
			coroutine.yield (luaEntryPoint)
		end
	end
end
self.GetHookEnumerator = CAC.YieldEnumeratorFactory (self.GetHookEnumerator)

function self:GetPatternCount ()
	return self.PatternCount
end

function self:GetPatternEnumerator ()
	return CAC.ArrayEnumerator (self.Patterns)
end

-- Hashes
function self:GetHashEnumerator (hash)
	if not self.EntriesByHash [hash] then
		return CAC.NullEnumerator ()
	elseif self.EntriesByHashArray [hash] then
		return CAC.ArrayEnumerator [self.EntriesByHash [hash]]
	else
		return CAC.SingleValueEnumerator (self.EntriesByHash [hash])
	end
end

-- Internal, do not call
function self:AddEntry (luaEntryPoint)
	self.Entries [#self.Entries + 1] = luaEntryPoint
	self.EntryCount = self.EntryCount + 1
	
	local hash = luaEntryPoint:GetHash ()
	if not self.EntriesByHash [hash] then
		self.EntriesByHash      [hash] = luaEntryPoint
		self.EntriesByHashArray [hash] = false
	else
		if not self.EntriesByHashArray [hash] then
			self.EntriesByHash      [hash] = { self.EntriesByHash [hash] }
			self.EntriesByHashArray [hash] = true
		end
		self.EntriesByHash [hash] [#self.EntriesByHash [hash] + 1] = luaEntryPoint
	end
end