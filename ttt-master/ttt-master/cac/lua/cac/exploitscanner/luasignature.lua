local self = {}
CAC.LuaSignature = CAC.MakeConstructor (self, CAC.LuaEntryPoint)

CAC.SerializerRegistry:RegisterSerializable ("LuaSignature", 2)

function self:ctor ()
	self.Pattern     = false
	self.Class       = nil
	self.AddonName   = nil
	self.Comment     = nil
	self.PatcherCode = nil
end

-- ISerializable
function self:Serialize (outBuffer)
	self:SerializeLuaEntryPoint (outBuffer)
	self:SerializeLuaSignature  (outBuffer)
	
	return outBuffer
end

function self:Deserialize (inBuffer)
	self:DeserializeLuaEntryPoint (inBuffer)
	self:DeserializeLuaSignature  (inBuffer)
	
	return self
end

-- LuaSignature
function self:SerializeLuaSignature (outBuffer)
	outBuffer:Boolean  (self:IsPattern      ())
	outBuffer:UInt8    (self:GetClass       ())
	outBuffer:Boolean  (self:GetAddonName   () ~= nil)
	if self:GetAddonName   () then outBuffer:StringN8  (self:GetAddonName   ()) end
	outBuffer:Boolean  (self:GetComment     () ~= nil)
	if self:GetComment     () then outBuffer:StringN16 (self:GetComment     ()) end
	outBuffer:Boolean  (self:GetPatcherCode () ~= nil)
	if self:GetPatcherCode () then outBuffer:StringN32 (self:GetPatcherCode ()) end
	
	return outBuffer
end

function self:DeserializeLuaSignature (inBuffer)
	self:SetPattern (inBuffer:Boolean  ())
	self:SetClass   (inBuffer:UInt8    ())
	if inBuffer:Boolean () then self:SetAddonName   (inBuffer:StringN8  ())
	else self:SetAddonName   (nil) end
	if inBuffer:Boolean () then self:SetComment     (inBuffer:StringN16 ())
	else self:SetComment     (nil) end
	if inBuffer:Boolean () then self:SetPatcherCode (inBuffer:StringN32 ())
	else self:SetPatcherCode (nil) end
	
	return self
end

function self:MatchesEntry (luaEntryPoint)
	if self:GetType () ~= luaEntryPoint:GetType () then return false end
	if self:GetHash () ~= luaEntryPoint:GetHash () then return false end
	
	if self:IsHook () then
		if self:GetEventName () ~= luaEntryPoint:GetEventName () then return false end
	end
	if self:IsPattern () then
		if not string.match (luaEntryPoint:GetName (), "^" .. self:GetName () .. "$") then
			return false
		end
	else
		if self:GetName () ~= luaEntryPoint:GetName () then return false end
	end
	
	return true
end

function self:IsPattern ()
	return self.Pattern
end

function self:GetClass ()
	return self.Class
end

function self:IsUnknown ()
	return self.Class == CAC.LuaEntryPointClass.Unknown
end

function self:IsSafe ()
	return self.Safe == CAC.LuaEntryPointClass.Safe
end

function self:IsExploitable ()
	return self.Class == CAC.LuaEntryPointClass.Exploitable
end

function self:IsBackdoor ()
	return self.Class == CAC.LuaEntryPointClass.Backdoor
end

function self:GetAddonName ()
	return self.AddonName
end

function self:GetComment ()
	return self.Comment
end

function self:GetPatcherCode ()
	return self.PatcherCode
end

function self:SetPattern (pattern)
	self.Pattern = pattern
	return self
end

function self:SetClass (class)
	self.Class = class
	return self
end

function self:SetAddonName (addonName)
	self.AddonName = addonName
	return self
end

function self:SetComment (comment)
	self.Comment = comment
	return self
end

function self:SetPatcherCode (patcherCode)
	self.PatcherCode = patcherCode
	return self
end