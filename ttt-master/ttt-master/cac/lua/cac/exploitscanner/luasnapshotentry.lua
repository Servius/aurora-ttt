local self = {}
CAC.LuaSnapshotEntry = CAC.MakeConstructor (self, CAC.LuaEntryPoint)

CAC.SerializerRegistry:RegisterSerializable ("LuaSnapshotEntry", 2)

function CAC.LuaSnapshotEntry.FromNetReceiver (name, f, luaSourceRetriever, luaSnapshotEntry)
	luaSnapshotEntry = luaSnapshotEntry or CAC.LuaSnapshotEntry ()
	luaSnapshotEntry:SetType         (CAC.LuaEntryPointType.NetReceiver)
	luaSnapshotEntry:SetOriginalName (name)
	luaSnapshotEntry:SetName         (name)
	
	return CAC.LuaSnapshotEntry.FromFunction (f, luaSourceRetriever, luaSnapshotEntry)
end

function CAC.LuaSnapshotEntry.FromConsoleCommand (name, f, luaSourceRetriever, luaSnapshotEntry)
	luaSnapshotEntry = luaSnapshotEntry or CAC.LuaSnapshotEntry ()
	luaSnapshotEntry:SetType         (CAC.LuaEntryPointType.ConsoleCommand)
	luaSnapshotEntry:SetOriginalName (name)
	luaSnapshotEntry:SetName         (name)
	
	return CAC.LuaSnapshotEntry.FromFunction (f, luaSourceRetriever, luaSnapshotEntry)
end

function CAC.LuaSnapshotEntry.FromHook (eventName, name, f, luaSourceRetriever, luaSnapshotEntry)
	luaSnapshotEntry = luaSnapshotEntry or CAC.LuaSnapshotEntry ()
	luaSnapshotEntry:SetType         (CAC.LuaEntryPointType.Hook)
	luaSnapshotEntry:SetEventName    (eventName)
	luaSnapshotEntry:SetOriginalName (name)
	if not isstring (name) then
		name = tostring (name)
	end
	luaSnapshotEntry:SetName         (name)
	
	return CAC.LuaSnapshotEntry.FromFunction (f, luaSourceRetriever, luaSnapshotEntry)
end

function CAC.LuaSnapshotEntry.FromFunction (f, luaSourceRetriever, luaSnapshotEntry)
	luaSnapshotEntry = luaSnapshotEntry or CAC.LuaSnapshotEntry ()
	
	luaSnapshotEntry:SetFunction  (f)
	local jitUtilFuncInfo = jit.util.funcinfo (f)
	if jitUtilFuncInfo.addr then
		luaSnapshotEntry:SetHash      (0x00000000)
		luaSnapshotEntry:SetPath      ("[C]")
		luaSnapshotEntry:SetStartLine (0)
		luaSnapshotEntry:SetEndLine   (0)
		
		local code = ""
		if     system.IsWindows () then code = code .. "W "
		elseif system.IsLinux   () then code = code .. "L "
		elseif system.IsOSX     () then code = code .. "O "
		else                            code = code .. "? " end
		
		local address                 = jitUtilFuncInfo.addr
		if address < 0 then address = address + 4294967296 end
		
		local serverDllBaseAddress    = CAC.Modules.GetLocalServerDllBaseAddress    ()
		local luaSharedDllBaseAddress = CAC.Modules.GetLocalLuaSharedDllBaseAddress ()
		local serverDllOffset         = address - serverDllBaseAddress
		local luaSharedDllOffset      = address - luaSharedDllBaseAddress
		if serverDllOffset    < 0 then serverDllOffset    = math.huge end
		if luaSharedDllOffset < 0 then luaSharedDllOffset = math.huge end
		if serverDllOffset < luaSharedDllOffset then
			code = code .. "server.dll + " .. string.format ("0x%08x", serverDllOffset)
		elseif luaSharedDllOffset < serverDllOffset then
			code = code .. "lua_shared.dll + " .. string.format ("0x%08x", luaSharedDllOffset)
		else
			code = code .. string.format ("0x%08x", address)
		end
		
		luaSnapshotEntry:SetCode (code)
	else
		luaSnapshotEntry:SetHash      (CAC.CalculateBytecodeHashFromFunction (f, jitUtilFuncInfo.bytecodes))
		local sourcePath = string.gsub (jitUtilFuncInfo.source, "^@", "")
		luaSnapshotEntry:SetPath      (sourcePath)
		luaSnapshotEntry:SetStartLine (jitUtilFuncInfo.linedefined    )
		luaSnapshotEntry:SetEndLine   (jitUtilFuncInfo.lastlinedefined)
		luaSnapshotEntry:SetCode      (luaSourceRetriever:GetFunctionSource (f, jitUtilFuncInfo, sourcePath))
	end
	
	return luaSnapshotEntry
end

function self:ctor ()
	self.Function     = nil
	self.OriginalName = nil
	
	self.Path         = nil
	self.StartLine    = nil
	self.EndLine      = nil
	self.Code         = nil
end

-- ISerializable
function self:Serialize (outBuffer)
	self:SerializeLuaEntryPoint    (outBuffer)
	self:SerializeLuaSnapshotEntry (outBuffer)
	
	return outBuffer
end

function self:Deserialize (inBuffer)
	self:DeserializeLuaEntryPoint    (inBuffer)
	self:DeserializeLuaSnapshotEntry (inBuffer)
	
	return self
end

-- LuaSnapshotEntry
function self:SerializeLuaSnapshotEntry (outBuffer)
	outBuffer:StringN32 (self:GetPath      ())
	outBuffer:UInt32    (self:GetStartLine ())
	outBuffer:UInt32    (self:GetEndLine   ())
	outBuffer:StringN32 (self:GetCode      ())
	
	return outBuffer
end

function self:DeserializeLuaSnapshotEntry (inBuffer)
	self:SetPath      (inBuffer:StringN32 ())
	self:SetStartLine (inBuffer:UInt32    ())
	self:SetEndLine   (inBuffer:UInt32    ())
	self:SetCode      (inBuffer:StringN32 ())
	
	return self
end

function self:GetFunction ()
	if not self.Function then return nil end
	return self.Function [1]
end

function self:GetOriginalName ()
	return self.OriginalName
end

function self:SetFunction (f)
	if not self.Function then
		self.Function = {}
		setmetatable (self.Function, { __mode = "v" })
	end
	self.Function [1] = f
	return self
end

function self:SetOriginalName (name)
	self.OriginalName = name
	return self
end

function self:IsCurrent ()
	local f = self:GetFunction ()
	if not f then return false end
	
	if self:IsNetReceiver () then
		return net.Receivers [self:GetOriginalName ()] == f
	elseif self:IsConsoleCommand () then
		return concommand.GetTable () [self:GetOriginalName ()] == f
	elseif self:IsHook () then
		local hookTable = hook.GetTable () [self:GetEventName ()]
		if not hookTable then return false end
		
		return hookTable [self:GetOriginalName ()] == f
	end
	
	return false
end

function self:GetFormattedLocation ()
	return (self.Path or "") .. ": " .. self.StartLine .. "-" .. self.EndLine
end

function self:GetPath ()
	return self.Path
end

function self:GetLineRange ()
	return self.StartLine, self.EndLine
end

function self:GetStartLine ()
	return self.StartLine
end

function self:GetEndLine ()
	return self.EndLine
end

function self:GetCode ()
	return self.Code
end

function self:SetPath (path)
	self.Path = path
	return self
end

function self:SetStartLine (startLine)
	self.StartLine = startLine
	return self
end

function self:SetEndLine (endLine)
	self.EndLine = endLine
	return self
end

function self:SetCode (code)
	self.Code = code
	return self
end