local self = {}
CAC.LuaScanResultEntry = CAC.MakeConstructor (self, CAC.LuaEntryPoint)

--[[
	Events:
		PatchableChanged (patchable)
			Fired when the patchability has changed.
		PatchedChanged (patched)
			Fired when the patchedness has changed.
]]

CAC.LuaScanResultEntry.Networking =
{
	Events =
	{
		PatchableChanged = { Handler = "SetPatchable", Parameters = { "Boolean" } },
		PatchedChanged   = { Handler = "SetPatched",   Parameters = { "Boolean" } },
	},
	Commands =
	{
		ApplyPatch       = { Handler = "ApplyPatch",   Parameters = {}            },
	},
	CommandPermissionPredicate = function (sender, object, commandName)
		return CAC.Permissions.PlayerHasPermission (sender:GetPlayer (), "ViewMenu")
	end,
}

CAC.LuaScanResultEntrySender   = CAC.CreateObjectSenderFactory   (CAC.LuaScanResultEntry)
CAC.LuaScanResultEntryReceiver = CAC.CreateObjectReceiverFactory (CAC.LuaScanResultEntry)

CAC.SerializerRegistry:RegisterSerializable ("LuaScanResultEntry", 1)

function self:ctor (luaSnapshotEntry, luaSignature)
	self.LuaSnapshotEntry  = nil
	self.LuaSignature      = nil
	
	self.Patchable         = false
	self.Patched           = false
	
	CAC.EventProvider (self)
	
	self:SetLuaSnapshotEntry (luaSnapshotEntry)
	self:SetLuaSignature     (luaSignature)
end

-- ISerializable
function self:Serialize (outBuffer)
	self:SerializeLuaEntryPoint (outBuffer)
	
	self.LuaSnapshotEntry:SerializeLuaSnapshotEntry (outBuffer)
	self.LuaSignature    :SerializeLuaSignature     (outBuffer)
	
	outBuffer:Boolean (self:IsPatchable ())
	outBuffer:Boolean (self:IsPatched   ())
	
	return outBuffer
end

function self:Deserialize (inBuffer)
	self:DeserializeLuaEntryPoint (inBuffer)
	
	self.LuaSnapshotEntry = self.LuaSnapshotEntry or CAC.LuaSnapshotEntry ()
	self.LuaSignature     = self.LuaSignature     or CAC.LuaSignature     ()
	self.LuaSnapshotEntry:CopyLuaEntryPoint (self)
	self.LuaSignature    :CopyLuaEntryPoint (self)
	self.LuaSnapshotEntry:DeserializeLuaSnapshotEntry (inBuffer)
	self.LuaSignature    :DeserializeLuaSignature     (inBuffer)
	
	self:SetPatchable (inBuffer:Boolean ())
	self:SetPatched   (inBuffer:Boolean ())
	
	return self
end

-- LuaScanResultEntry
function self:GetLuaSnapshotEntry ()
	return self.LuaSnapshotEntry
end

function self:GetLuaSignature ()
	return self.LuaSignature
end

function self:IsPatchable ()
	return self.Patchable
end

function self:IsPatched ()
	return self.Patched
end

function self:SetLuaSnapshotEntry (luaSnapshotEntry)
	if self.LuaSnapshotEntry == luaSnapshotEntry then return self end
	
	self.LuaSnapshotEntry = luaSnapshotEntry
	
	if self.LuaSnapshotEntry then
		self:CopyLuaEntryPoint (self.LuaSnapshotEntry)
	end
	self:UpdatePatchable ()
	
	return self
end

function self:SetLuaSignature (luaSignature)
	if self.LuaSignature == luaSignature then return self end
	
	self.LuaSignature = luaSignature
	self:UpdatePatchable ()
	
	return self
end

function self:SetPatchable (patchable)
	if self.Patchable == patchable then return self end
	
	self.Patchable = patchable
	
	self:DispatchEvent ("PatchableChanged", self.Patchable)
	
	return self
end

function self:SetPatched (patched)
	if self.Patched == patched then return self end
	
	self.Patched = patched
	
	self:DispatchEvent ("PatchedChanged", self.Patched)
	
	return self
end

function self:ApplyPatch ()
	self:UpdatePatchable ()
	if not self:IsPatchable () then return end
	
	RunStringEx (self.LuaSignature:GetPatcherCode (), "CAC.Patch." .. self.LuaSignature:GetId ())
	
	self:SetPatched (true)
end

-- Internal, do not call
function self:UpdatePatchable ()
	self:SetPatchable (self.LuaSnapshotEntry and self.LuaSnapshotEntry:IsCurrent () and
	                   self.LuaSignature     and self.LuaSignature:GetPatcherCode ())
end
